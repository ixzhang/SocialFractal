relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes != current_sex)
} else {
relationship_df[i, paste0("tier", tier)] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes != current_sex)
}
}
}
relationship_df
}
social_network_data <- data(zf_rep1_real)
sex.information <- zf_ind$sex[match(dimnames(zf_rep1_real)[[1]], zf_ind$QR)]
breakpoints <- get_breakpoints(social_networks_data,
sex = sex.information, break_num = 3)
breakpoints <- get_breakpoints(social_network_data,
sex = sex.information, break_num = 3)
social_networks <- social_network_data
sex = sex.information
break_num = 3
# Extract individual IDs and time points from the array's dimension names
individual_ids <- dimnames(social_networks)[[1]] # Individuals' identifiers
time_points <- dimnames(social_networks)[[3]] # Time points in the data
num_time_points <- length(time_points) # Total number of time points
num_individuals <- length(individual_ids) # Total number of individuals
# Generate dynamic column names for Jenks breakpoints
colnames_jenks <- paste0("jenk", 1:break_num)
# Initialize a data.frame to store the results (ID, time, and breakpoints)
breakpoints_df <- data.frame(
ID = character(num_time_points * num_individuals),
sex = character(num_time_points * num_individuals),
time = character(num_time_points * num_individuals),
stringsAsFactors = FALSE
)
# Add columns for Jenks breakpoints
for (col in colnames_jenks) {
breakpoints_df[[col]] <- numeric(num_time_points * num_individuals)
}
social_networks[is.na(social_networks)] <- 0
# Iterate over each time point
for (time_idx in 1:num_time_points) {
# Determine the range of rows in the data.frame for the current time point
start_row <- (num_individuals * (time_idx - 1)) + 1
end_row <- num_individuals * time_idx
# Assign individual IDs and time point to the current block of rows
breakpoints_df[start_row:end_row, "ID"] <- individual_ids
# Assign individual IDs
breakpoints_df[start_row:end_row, "sex"] <- sex
breakpoints_df[start_row:end_row, "time"] <- time_points[time_idx]
# Assign current time point
# Iterate over each individual within the current time point
for (individual_idx in 1:num_individuals) {
# Extract interaction values for the current individual
# (excluding their own ID)
interaction_values <- social_networks[
individual_idx, -individual_idx, time_idx
]
# Skip individuals with no interactions (all zeros)
if (sum(interaction_values) == 0) {
next
}
# Calculate Jenks natural breakpoints for the current set of
# interaction values
# Note: The function 'getJenksBreaks' returns 'break_num + 2' breakpoints
# we extract the middle ones
jenks_breaks <- BAMMtools::getJenksBreaks(interaction_values,
break_num + 2)
# Assign the calculated breakpoints to the corresponding row
# in the data.frame
current_row <- start_row + individual_idx - 1
breakpoints_df[current_row, colnames_jenks] <-
rev(jenks_breaks[2:(break_num + 1)])
}
}
# Extract interaction values for the current individual
# (excluding their own ID)
interaction_values <- social_networks[
individual_idx, -individual_idx, time_idx
]
# Determine the range of rows in the data.frame for the current time point
start_row <- (num_individuals * (time_idx - 1)) + 1
end_row <- num_individuals * time_idx
social_networks
social_network_data <- data(zf_rep1_real)
social_network_data <- data(zf_rep1_real)
data(zf_rep1_real)
devtools::document()
rm(list = c("relationship_num"))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
Sys.setenv(TZ = "UTC")
system.file("extdata", raw_data.rda", package = "SocialFractal")
file.path <- "inst/extdata/raw_data.rda"
load(file.path)
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
View(raw_data)
devtools::document()
devtools::document()
devtools::check()
install.packages("pkgdown")
usethis::use_pkgdown()
pkgdown::build_site()
data("raw_data")
View(raw_data)
?raw_data
?clumping_rate
SocialFractal::zf_rep4_real
devtools::document()
?clumping_rate
usethis::use_r("clumping_rate_null1")
a <- 1:20
b <- c(2,3,5)
match(b,a)
a <- a*2
b <- b*2
match(b,a)
usethis::use_r("clumping_rate_null2")
devtools::document()
devtools::document()
library(SocialFractal)
# 如无特殊需求，或者新手入门下述命令直接无脑设置即可
usethis::use_tidy_github_actions()
devtools::install_github("ixzhang/SocialFractal")
data("zf_ind")
View(zf_ind)
data("zf_rep1_real")
dimnames(zf_rep1_real)
zf_rep1_real[,,1]
data("zf_rep4_real")
relationship_num <- function(social_networks, breakpoints_df) {
# Extract individual IDs and time points from social_networks
individual_ids <- dimnames(social_networks)[[1]]
time_points <- dimnames(social_networks)[[3]]
# Map individual IDs to their corresponding sex
sexes <- breakpoints_df$sex[match(individual_ids, breakpoints_df$ID)]
# Calculate the number of tiers based on breakpoints_df columns
num_tiers <- ncol(breakpoints_df) - 3
# Assuming columns are ID, sex, time, jenk1, ..., jenkN
# Initialize the relationship data.frame with existing columns
relationship_df <- breakpoints_df[, c("ID", "time", "sex")]
# Iterate over each row in the relationship data.frame
for (i in seq_along(relationship_df)) {
current_id <- relationship_df$ID[i]
current_sex <- relationship_df$sex[i]
current_time <- relationship_df$time[i]
# Find the index of the current ID and time in the social_networks array
id_idx <- which(individual_ids == current_id)
time_idx <- which(time_points == current_time)
# Extract the egocentric network for the current individual at the
# current time
egocentric_network <- social_networks[id_idx, -id_idx, time_idx]
other_sexes <- sexes[-id_idx] # Sexes of other individuals
# Iterate over each tier to calculate relationship counts
for (tier in 1:(num_tiers + 1)) {
if (tier == (num_tiers + 1)) {
relationship_df[i, paste0("tier", tier)] <-
sum(
egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
)
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes != current_sex)
} else {
relationship_df[i, paste0("tier", tier)] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes != current_sex)
}
}
}
relationship_df
}
data(zf_rep1_real)
sex.information <- zf_ind$sex[match(dimnames(zf_rep1_real)[[1]], zf_ind$QR)]
breakpoints <- get_breakpoints(zf_rep1_real,
sex = sex.information, break_num = 3)
#' @export
#'
#' @examples
#' # Example usage:
#' # Assuming 'social_network_data' is a 3D array with dimensions
#' # individuals, individuals, time
#' sex.information <- zf_ind$sex[match(dimnames(zf_rep1_real)[[1]], zf_ind$QR)]
#' breakpoints <- get_breakpoints(social_networks = zf_rep1_real,
#' sex = sex.information, break_num = 3)
#' print(breakpoints)
get_breakpoints <- function(social_networks, sex = NA, break_num = 3) {
# Extract individual IDs and time points from the array's dimension names
individual_ids <- dimnames(social_networks)[[1]] # Individuals' identifiers
time_points <- dimnames(social_networks)[[3]] # Time points in the data
num_time_points <- length(time_points) # Total number of time points
num_individuals <- length(individual_ids) # Total number of individuals
# Generate dynamic column names for Jenks breakpoints
colnames_jenks <- paste0("jenk", 1:break_num)
# Column names for breakpoints (e.g., jenk1, jenk2, ...)
# Initialize a data.frame to store the results (ID, time, and breakpoints)
breakpoints_df <- data.frame(
ID = character(num_time_points * num_individuals),
sex = character(num_time_points * num_individuals),
time = character(num_time_points * num_individuals),
stringsAsFactors = FALSE
)
# Add columns for Jenks breakpoints
for (col in colnames_jenks) {
breakpoints_df[[col]] <- numeric(num_time_points * num_individuals)
}
social_networks[is.na(social_networks)] <- 0
# Iterate over each time point
for (time_idx in 1:num_time_points) {
# Determine the range of rows in the data.frame for the current time point
start_row <- (num_individuals * (time_idx - 1)) + 1
end_row <- num_individuals * time_idx
# Assign individual IDs and time point to the current block of rows
breakpoints_df[start_row:end_row, "ID"] <- individual_ids
# Assign individual IDs
breakpoints_df[start_row:end_row, "sex"] <- sex
breakpoints_df[start_row:end_row, "time"] <- time_points[time_idx]
# Assign current time point
# Iterate over each individual within the current time point
for (individual_idx in 1:num_individuals) {
# Extract interaction values for the current individual
# (excluding their own ID)
interaction_values <- social_networks[
individual_idx, -individual_idx, time_idx
]
# Skip individuals with no interactions (all zeros)
if (sum(interaction_values) == 0) {
next
}
# Calculate Jenks natural breakpoints for the current set of
# interaction values
# Note: The function 'getJenksBreaks' returns 'break_num + 2' breakpoints
# we extract the middle ones
jenks_breaks <- BAMMtools::getJenksBreaks(interaction_values,
break_num + 2)
# Assign the calculated breakpoints to the corresponding row
# in the data.frame
current_row <- start_row + individual_idx - 1
breakpoints_df[current_row, colnames_jenks] <-
rev(jenks_breaks[2:(break_num + 1)])
}
}
# Convert time column to numeric (if necessary)
breakpoints_df$time <- as.numeric(breakpoints_df$time)
# Return the data.frame of Jenks breakpoints
return(breakpoints_df)
}
data(zf_rep1_real)
sex.information <- zf_ind$sex[match(dimnames(zf_rep1_real)[[1]], zf_ind$QR)]
breakpoints <- get_breakpoints(zf_rep1_real,
sex = sex.information, break_num = 3)
relationships <- relationship_num(zf_rep1_real, breakpoints)
print(relationships)
social_networks <- zf_rep1_real
breakpoints_df <- breakpoints
# Extract individual IDs and time points from social_networks
individual_ids <- dimnames(social_networks)[[1]]
time_points <- dimnames(social_networks)[[3]]
# Map individual IDs to their corresponding sex
sexes <- breakpoints_df$sex[match(individual_ids, breakpoints_df$ID)]
# Calculate the number of tiers based on breakpoints_df columns
num_tiers <- ncol(breakpoints_df) - 3
# Initialize the relationship data.frame with existing columns
relationship_df <- breakpoints_df[, c("ID", "time", "sex")]
# Iterate over each row in the relationship data.frame
for (i in seq_along(relationship_df)) {
current_id <- relationship_df$ID[i]
current_sex <- relationship_df$sex[i]
current_time <- relationship_df$time[i]
# Find the index of the current ID and time in the social_networks array
id_idx <- which(individual_ids == current_id)
time_idx <- which(time_points == current_time)
# Extract the egocentric network for the current individual at the
# current time
egocentric_network <- social_networks[id_idx, -id_idx, time_idx]
other_sexes <- sexes[-id_idx] # Sexes of other individuals
# Iterate over each tier to calculate relationship counts
for (tier in 1:(num_tiers + 1)) {
if (tier == (num_tiers + 1)) {
relationship_df[i, paste0("tier", tier)] <-
sum(
egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
)
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes != current_sex)
} else {
relationship_df[i, paste0("tier", tier)] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes != current_sex)
}
}
}
View(relationship_df)
View(breakpoints)
tier = 1
relationship_df[i, paste0("tier", tier)]
i=1
relationship_df[i, paste0("tier", tier)]
sum(
egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
)
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
egocentric_network
which(individual_ids == current_id)
i=1
current_id <- relationship_df$ID[i]
current_sex <- relationship_df$sex[i]
current_time <- relationship_df$time[i]
# Find the index of the current ID and time in the social_networks array
id_idx <- which(individual_ids == current_id)
time_idx <- which(time_points == current_time)
# Extract the egocentric network for the current individual at the
# current time
egocentric_network <- social_networks[id_idx, -id_idx, time_idx]
other_sexes <- sexes[-id_idx] # Sexes of other individuals
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
i=4
current_id <- relationship_df$ID[i]
current_sex <- relationship_df$sex[i]
current_time <- relationship_df$time[i]
# Find the index of the current ID and time in the social_networks array
id_idx <- which(individual_ids == current_id)
time_idx <- which(time_points == current_time)
# Extract the egocentric network for the current individual at the
# current time
egocentric_network <- social_networks[id_idx, -id_idx, time_idx]
other_sexes <- sexes[-id_idx] # Sexes of other individuals
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
num_tiers
# Iterate over each tier to calculate relationship counts
for (tier in 1:(num_tiers + 1)) {
if (tier == (num_tiers + 1)) {
relationship_df[i, paste0("tier", tier)] <-
sum(
egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
)
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes != current_sex)
} else {
relationship_df[i, paste0("tier", tier)] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes != current_sex)
}
}
seq_along(relationship_df)
seq_along(relationship_df$ID)
# Extract individual IDs and time points from social_networks
individual_ids <- dimnames(social_networks)[[1]]
time_points <- dimnames(social_networks)[[3]]
# Map individual IDs to their corresponding sex
sexes <- breakpoints_df$sex[match(individual_ids, breakpoints_df$ID)]
# Calculate the number of tiers based on breakpoints_df columns
num_tiers <- ncol(breakpoints_df) - 3
# Initialize the relationship data.frame with existing columns
relationship_df <- breakpoints_df[, c("ID", "time", "sex")]
# Iterate over each row in the relationship data.frame
for (i in seq_along(relationship_df$ID)) {
current_id <- relationship_df$ID[i]
current_sex <- relationship_df$sex[i]
current_time <- relationship_df$time[i]
# Find the index of the current ID and time in the social_networks array
id_idx <- which(individual_ids == current_id)
time_idx <- which(time_points == current_time)
# Extract the egocentric network for the current individual at the
# current time
egocentric_network <- social_networks[id_idx, -id_idx, time_idx]
other_sexes <- sexes[-id_idx] # Sexes of other individuals
# Iterate over each tier to calculate relationship counts
for (tier in 1:(num_tiers + 1)) {
if (tier == (num_tiers + 1)) {
relationship_df[i, paste0("tier", tier)] <-
sum(
egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
)
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes != current_sex)
} else {
relationship_df[i, paste0("tier", tier)] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes != current_sex)
}
}
}
relationship_df
devtools::document()
View(relationship_df)
sum(is.na(relationship_df$tier1))
sum(!is.na(relationship_df$tier1))
seq_along(relationship_df$ID)
i=1000
current_id <- relationship_df$ID[i]
current_sex <- relationship_df$sex[i]
current_time <- relationship_df$time[i]
# Find the index of the current ID and time in the social_networks array
id_idx <- which(individual_ids == current_id)
time_idx <- which(time_points == current_time)
# Extract the egocentric network for the current individual at the
# current time
egocentric_network <- social_networks[id_idx, -id_idx, time_idx]
other_sexes <- sexes[-id_idx] # Sexes of other individuals
tier=1
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
breakpoints_df[i, paste0("jenk", tier)])
paste0("jenk", tier)
View(breakpoints_df)
breakpoints_df[i, paste0("jenk", tier)]
egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
egocentric_network
length(egocentric_network)
id_idx
time_idx
social_networks[40, , 13]
social_networks[is.na(social_networks)] <- 0
# Extract individual IDs and time points from social_networks
individual_ids <- dimnames(social_networks)[[1]]
time_points <- dimnames(social_networks)[[3]]
# Map individual IDs to their corresponding sex
sexes <- breakpoints_df$sex[match(individual_ids, breakpoints_df$ID)]
# Calculate the number of tiers based on breakpoints_df columns
num_tiers <- ncol(breakpoints_df) - 3
# Initialize the relationship data.frame with existing columns
relationship_df <- breakpoints_df[, c("ID", "time", "sex")]
# Iterate over each row in the relationship data.frame
for (i in seq_along(relationship_df$ID)) {
current_id <- relationship_df$ID[i]
current_sex <- relationship_df$sex[i]
current_time <- relationship_df$time[i]
# Find the index of the current ID and time in the social_networks array
id_idx <- which(individual_ids == current_id)
time_idx <- which(time_points == current_time)
# Extract the egocentric network for the current individual at the
# current time
egocentric_network <- social_networks[id_idx, -id_idx, time_idx]
other_sexes <- sexes[-id_idx] # Sexes of other individuals
# Iterate over each tier to calculate relationship counts
for (tier in 1:(num_tiers + 1)) {
if (tier == (num_tiers + 1)) {
relationship_df[i, paste0("tier", tier)] <-
sum(
egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
)
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)]
& other_sexes != current_sex)
} else {
relationship_df[i, paste0("tier", tier)] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)]
& other_sexes != current_sex)
}
}
}
devtools::document()
