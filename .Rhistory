return(breakpoints_df)
}
breakpoint_df <- get_breakpoints(zf_rep1_real)
social_networks <- zf_rep1_real
IDs <- dimnames(social_networks)[[1]]
times <- dimnames(social_networks)[[3]]
break_num <- ncol(breakpoints_df) - 3
colnames_relationship <- strings <- c(
paste0("tier", 1:(break_num + 1)),
paste0("tier", 1:(break_num + 1), "_homo"),
paste0("tier", 1:(break_num + 1), "_hetero")
)
breakpoints_df <- get_breakpoints(zf_rep1_real)
rm(breakpoint_df)
break_num <- ncol(breakpoints_df) - 3
colnames_relationship <- strings <- c(
paste0("tier", 1:(break_num + 1)),
paste0("tier", 1:(break_num + 1), "_homo"),
paste0("tier", 1:(break_num + 1), "_hetero")
)
View(breakpoints_df)
relationship_df <- breakpoints_df[, 1:3]
View(breakpoints_df)
a <- c(1,2,3)
reverse(a)
-a
rev(a)
#' @param break_num The number of breaks (clusters) to compute. Default is 3.
#' @return A matrix containing the ID, time point, and Jenks breakpoints for each individual-time combination.
#' @export
#'
#' @examples
#' # Example usage:
#' # Assuming 'social_network_data' is a 3D array with dimensions [individuals, individuals, time]
#' sex.information <- zf_ind$sex[match(dimnames(zf_rep1_real)[[1]], zf_ind$QR)
#' breakpoints <- get_breakpoints(social_networks = zf_rep1_real, sex = sex.information, break_num = 3)
#' print(breakpoints)
get_breakpoints <- function(social_networks, sex = NA, break_num = 3) {
require(BAMMtools)
# Extract individual IDs and time points from the array's dimension names
individual_ids <- dimnames(social_networks)[[1]]   # Individuals' identifiers
time_points <- dimnames(social_networks)[[3]]      # Time points in the data
num_time_points <- length(time_points)            # Total number of time points
num_individuals <- length(individual_ids)         # Total number of individuals
# Generate dynamic column names for Jenks breakpoints
colnames_jenks <- paste0("jenk", 1:break_num)      # Column names for breakpoints (e.g., jenk1, jenk2, ...)
# Initialize a data.frame to store the results (ID, time, and breakpoints)
breakpoints_df <- data.frame(
ID = character(num_time_points * num_individuals),
sex = character(num_time_points * num_individuals),
time = character(num_time_points * num_individuals),
stringsAsFactors = FALSE
)
# Add columns for Jenks breakpoints
for (col in colnames_jenks) {
breakpoints_df[[col]] <- numeric(num_time_points * num_individuals)
}
social_networks[is.na(social_networks)] <- 0
# Iterate over each time point
for (time_idx in 1:num_time_points) {
# Determine the range of rows in the data.frame for the current time point
start_row <- (num_individuals * (time_idx - 1)) + 1
end_row <- num_individuals * time_idx
# Assign individual IDs and time point to the current block of rows
breakpoints_df[start_row:end_row, "ID"] <- individual_ids   # Assign individual IDs
breakpoints_df[start_row:end_row, "sex"] <- sex
breakpoints_df[start_row:end_row, "time"] <- time_points[time_idx]  # Assign current time point
# Iterate over each individual within the current time point
for (individual_idx in 1:num_individuals) {
# Extract interaction values for the current individual (excluding their own ID)
interaction_values <- social_networks[individual_idx, -individual_idx, time_idx]
# Skip individuals with no interactions (all zeros)
if (sum(interaction_values) == 0) {
next
}
# Calculate Jenks natural breakpoints for the current set of interaction values
# Note: The function 'getJenksBreaks' returns 'break_num + 2' breakpoints; we extract the middle ones
jenks_breaks <- getJenksBreaks(interaction_values, break_num + 2)
# Assign the calculated breakpoints to the corresponding row in the data.frame
current_row <- start_row + individual_idx - 1
breakpoints_df[current_row, colnames_jenks] <- rev(jenks_breaks[2:(break_num + 1)])
}
}
# Convert time column to numeric (if necessary)
breakpoints_df$time <- as.numeric(breakpoints_df$time)
# Return the data.frame of Jenks breakpoints
return(breakpoints_df)
}
View(get_breakpoints)
sex.information <- zf_ind$sex[match(dimnames(zf_rep1_real)[[1]], zf_ind$QR)]
SocialFractal::zf_ind
data(SocialFractal::zf_ind)
data(zf_ind)
sex.information <- zf_ind$sex[match(dimnames(zf_rep1_real)[[1]], zf_ind$QR)]
breakpoints_df <- SocialFractal::get_breakpoints(zf_rep1_real, sex.information)
breakpoints_df <- get_breakpoints(zf_rep1_real, sex.information)
View(breakpoints_df)
paste0("jenk", 1)
breakpoints_df[paste0("jenk", 1), 1]
breakpoints_df$paste0("jenk",1)
breakpoints_df$(paste0("jenk",1))
breakpoints_df[1,paste0("jenk", 1)]
IDs <- dimnames(social_networks)[[1]]
times <- dimnames(social_networks)[[3]]
break_num <- ncol(breakpoints_df) - 3
colnames_relationship <- strings <- c(
paste0("tier", 1:(break_num + 1)),
paste0("tier", 1:(break_num + 1), "_homo"),
paste0("tier", 1:(break_num + 1), "_hetero")
)
relationship_df <- breakpoints_df[, 1:3]
for (i in 1:nrow(relationship_df)){
ID <- relationship_df$ID[i]
sex <- relationship_df$sex[i]
time <- relationship_df$time[i]
idx <- which(IDs == ID)
tx <- which(times == time)
egocentric_network <- social_networks[idx, -idx, tx]
for (j in 1:(break_num + 1)){
if (j == (break_num + 1)){
relationship_df[i, paste0("tier", j)] <- sum(egocentric_network <=
breakpoints_df[i, paste0("jenk", break_num)])
} else {
relationship_df[i, paste0("tier", j)] <- sum(egocentric_network >
breakpoints_df[i, paste0("jenk", j)])
}
}
}
View(relationship_df)
match(IDs, breakpoints_df$ID)
1 == NA
IDs <- dimnames(social_networks)[[1]]
times <- dimnames(social_networks)[[3]]
Sexes <- breakpoints_df$sex[match(IDs, breakpoints_df$ID)]
break_num <- ncol(breakpoints_df) - 3
colnames_relationship <- strings <- c(
paste0("tier", 1:(break_num + 1)),
paste0("tier", 1:(break_num + 1), "_homo"),
paste0("tier", 1:(break_num + 1), "_hetero")
)
relationship_df <- breakpoints_df[, 1:3]
for (i in 1:nrow(relationship_df)){
ID <- relationship_df$ID[i]
sex <- relationship_df$sex[i]
time <- relationship_df$time[i]
idx <- which(IDs == ID)
tx <- which(times == time)
egocentric_network <- social_networks[idx, -idx, tx]
sexes <- Sexes[-idx]
for (j in 1:(break_num + 1)){
if (j == (break_num + 1)){
relationship_df[i, paste0("tier", j)] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", break_num)])
relationship_df[i, paste0("tier", j, "_homo")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", break_num)] &
sexes == sex)
relationship_df[i, paste0("tier", j, "_hetero")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", break_num)] &
sexes != sex)
} else {
relationship_df[i, paste0("tier", j)] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", j)])
relationship_df[i, paste0("tier", j, "_homo")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", j)] &
sexes == sex)
relationship_df[i, paste0("tier", j, "_hetero")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", j)] &
sexes != sex)
}
}
}
View(relationship_df)
breakpoints_df <- get_breakpoints(zf_rep1_real)
IDs <- dimnames(social_networks)[[1]]
times <- dimnames(social_networks)[[3]]
Sexes <- breakpoints_df$sex[match(IDs, breakpoints_df$ID)]
break_num <- ncol(breakpoints_df) - 3
colnames_relationship <- strings <- c(
paste0("tier", 1:(break_num + 1)),
paste0("tier", 1:(break_num + 1), "_homo"),
paste0("tier", 1:(break_num + 1), "_hetero")
)
relationship_df <- breakpoints_df[, 1:3]
for (i in 1:nrow(relationship_df)){
ID <- relationship_df$ID[i]
sex <- relationship_df$sex[i]
time <- relationship_df$time[i]
idx <- which(IDs == ID)
tx <- which(times == time)
egocentric_network <- social_networks[idx, -idx, tx]
sexes <- Sexes[-idx]
for (j in 1:(break_num + 1)){
if (j == (break_num + 1)){
relationship_df[i, paste0("tier", j)] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", break_num)])
relationship_df[i, paste0("tier", j, "_homo")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", break_num)] &
sexes == sex)
relationship_df[i, paste0("tier", j, "_hetero")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", break_num)] &
sexes != sex)
} else {
relationship_df[i, paste0("tier", j)] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", j)])
relationship_df[i, paste0("tier", j, "_homo")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", j)] &
sexes == sex)
relationship_df[i, paste0("tier", j, "_hetero")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", j)] &
sexes != sex)
}
}
}
View(relationship_df)
# Extract individual IDs and time points from social_networks
individual_ids <- dimnames(social_networks)[[1]]
time_points <- dimnames(social_networks)[[3]]
# Map individual IDs to their corresponding sex
sexes <- breakpoints_df$sex[match(individual_ids, breakpoints_df$ID)]
# Calculate the number of tiers based on the breakpoints_df columns
num_tiers <- ncol(breakpoints_df) - 3  # Assuming columns are ID, time, jenk1, ..., jenkN
# Generate column names for relationship tiers and their gender subcategories
tier_cols <- paste0("tier", 1:(num_tiers + 1))
colnames_relationship <- c(tier_cols,
paste0(tier_cols, "_homo"),
paste0(tier_cols, "_hetero"))
# Initialize the relationship data.frame with existing columns
relationship_df <- breakpoints_df[, c("ID", "time", "sex")]
# Add columns for relationship tiers and gender subcategories
relationship_df[, colnames_relationship] <- 0
# Iterate over each row in the relationship data.frame
for (i in 1:nrow(relationship_df)) {
current_id <- relationship_df$ID[i]
current_sex <- relationship_df$sex[i]
current_time <- relationship_df$time[i]
# Find the index of the current ID and time in the social_networks array
id_idx <- which(individual_ids == current_id)
time_idx <- which(time_points == current_time)
# Extract the egocentric network for the current individual at the current time
egocentric_network <- social_networks[id_idx, -id_idx, time_idx]
other_sexes <- sexes[-id_idx]  # Sexes of other individuals
# Iterate over each tier to calculate relationship counts
for (tier in 1:(num_tiers + 1)) {
jenks_col_name <- paste0("jenk", tier)
if (tier == (num_tiers + 1)) {
# For the last tier, count values <= last Jenks break
jenk_value <- breakpoints_df[i, jenks_col_name]
condition <- egocentric_network <= jenk_value
# Calculate total, same-sex, and different-sex counts
relationship_df[i, paste0("tier", tier)] <- sum(condition)
relationship_df[i, paste0("tier", tier, "_homo")] <- sum(condition & other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <- sum(condition & other_sexes != current_sex)
} else {
# For other tiers, count values > current Jenks break (but <= next break)
jenk_value <- breakpoints_df[i, jenks_col_name]
condition <- egocentric_network > jenk_value
# Calculate total, same-sex, and different-sex counts
relationship_df[i, paste0("tier", tier)] <- sum(condition)
relationship_df[i, paste0("tier", tier, "_homo")] <- sum(condition & other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <- sum(condition & other_sexes != current_sex)
}
}
}
# Return the relationship data.frame
return(relationship_df)
# Extract individual IDs and time points from social_networks
individual_ids <- dimnames(social_networks)[[1]]
time_points <- dimnames(social_networks)[[3]]
# Map individual IDs to their corresponding sex
sexes <- breakpoints_df$sex[match(individual_ids, breakpoints_df$ID)]
# Calculate the number of tiers based on breakpoints_df columns
num_tiers <- ncol(breakpoints_df) - 3
# Generate column names for relationship tiers and their gender subcategories
tier_cols <- paste0("tier", 1:(num_tiers + 1))
colnames_relationship <- c(tier_cols,
paste0(tier_cols, "_homo"),
paste0(tier_cols, "_hetero"))
# Initialize the relationship data.frame with existing columns
relationship_df <- breakpoints_df[, c("ID", "time", "sex")]
# Iterate over each row in the relationship data.frame
for (i in 1:nrow(relationship_df)){
current_id <- relationship_df$ID[i]
current_sex <- relationship_df$sex[i]
current_time <- relationship_df$time[i]
# Find the index of the current ID and time in the social_networks array
id_idx <- which(individual_ids == current_id)
time_idx <- which(time_points == current_time)
# Extract the egocentric network for the current individual at the current time
egocentric_network <- social_networks[id_idx, -id_idx, time_idx]
other_sexes <- sexes[-id_idx]  # Sexes of other individuals
# Iterate over each tier to calculate relationship counts
for (tier in 1:(num_tiers + 1)) {
if (tier == (num_tiers + 1)){
relationship_df[i, paste0("tier", tier)] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)])
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)] &
other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)] &
other_sexes != current_sex)
} else {
relationship_df[i, paste0("tier", tier)] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)] &
other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)] &
other_sexes != current_sex)
}
}
}
View(breakpoints_df)
View(relationship_df)
sex.information <- zf_ind$sex[match(dimnames(zf_rep1_real)[[1]], zf_ind$QR)]
breakpoints_df <- get_breakpoints(zf_rep1_real, sex.information)
# Extract individual IDs and time points from social_networks
individual_ids <- dimnames(social_networks)[[1]]
time_points <- dimnames(social_networks)[[3]]
# Map individual IDs to their corresponding sex
sexes <- breakpoints_df$sex[match(individual_ids, breakpoints_df$ID)]
# Calculate the number of tiers based on breakpoints_df columns
num_tiers <- ncol(breakpoints_df) - 3
# Generate column names for relationship tiers and their gender subcategories
tier_cols <- paste0("tier", 1:(num_tiers + 1))
colnames_relationship <- c(tier_cols,
paste0(tier_cols, "_homo"),
paste0(tier_cols, "_hetero"))
# Initialize the relationship data.frame with existing columns
relationship_df <- breakpoints_df[, c("ID", "time", "sex")]
# Iterate over each row in the relationship data.frame
for (i in 1:nrow(relationship_df)){
current_id <- relationship_df$ID[i]
current_sex <- relationship_df$sex[i]
current_time <- relationship_df$time[i]
# Find the index of the current ID and time in the social_networks array
id_idx <- which(individual_ids == current_id)
time_idx <- which(time_points == current_time)
# Extract the egocentric network for the current individual at the current time
egocentric_network <- social_networks[id_idx, -id_idx, time_idx]
other_sexes <- sexes[-id_idx]  # Sexes of other individuals
# Iterate over each tier to calculate relationship counts
for (tier in 1:(num_tiers + 1)) {
if (tier == (num_tiers + 1)){
relationship_df[i, paste0("tier", tier)] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)])
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)] &
other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network <= breakpoints_df[i, paste0("jenk", num_tiers)] &
other_sexes != current_sex)
} else {
relationship_df[i, paste0("tier", tier)] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)])
relationship_df[i, paste0("tier", tier, "_homo")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)] &
other_sexes == current_sex)
relationship_df[i, paste0("tier", tier, "_hetero")] <-
sum(egocentric_network > breakpoints_df[i, paste0("jenk", tier)] &
other_sexes != current_sex)
}
}
}
devtools::document()
file.create("R/multilevel_group_size.R")
install.packages("igraph")
library(igraph)
time_points <- dimnames(social_networks)[[3]]
group_size_df <- data.frame()
i=1
single_network <- social_networks[,,i]
single_network[is.na(single_network)] <- 0
single_graph <- graph.adjacency(single_network, mode = "undirected", weighted = TRUE)
clusters_detected <- cluster_louvain(single_graph)
ncol(clusters_detected)
(clusters_detected
(clusters_detected)
(clusters_detected)
)
clusters_detected
ncol(clusters_detected$memberships)
nrow(clusters_detected$memberships)
rmax(clusters_detected$memberships)
row.max(clusters_detected$memberships)
?rowMeans
apply(clusters_detected$memberships, 2, FUN = max)
apply(clusters_detected$memberships, 1, FUN = max)
multilevel_group_size <- function(social_networks) {
require(igraph)
time_points <- dimnames(social_networks)[[3]]
group_size_df <- data.frame()
for (i in 1:length(time_points)){
single_network <- social_networks[,,i]
single_network[is.na(single_network)] <- 0
single_graph <- graph.adjacency(single_network, mode = "undirected", weighted = TRUE)
clusters_detected <- cluster_louvain(single_graph)
levels_detected <- nrow(clusters_detected$memberships)
gs_df <- data.frame(
time = time_points[i],
level = 1:(levels_detected + 1),
individual_num <- clusters_detected$vcount,
group_num <- c(clusters_detected$vcount,
apply(clusters_detected$memberships, 1, FUN = max))
)
gs_df$group_size <- gs_df$individual_num / gs_df$group_num
group_size_df <- rbind(group_size_df, gs_df)
}
}
multilevel_group_size(social_networks)
multilevel_group_size <- function(social_networks) {
require(igraph)
time_points <- dimnames(social_networks)[[3]]
group_size_df <- data.frame()
for (i in 1:length(time_points)){
single_network <- social_networks[,,i]
single_network[is.na(single_network)] <- 0
single_graph <- graph.adjacency(single_network, mode = "undirected", weighted = TRUE)
clusters_detected <- cluster_louvain(single_graph)
levels_detected <- nrow(clusters_detected$memberships)
gs_df <- data.frame(
time = time_points[i],
level = 1:(levels_detected + 1),
individual_num <- clusters_detected$vcount,
group_num <- c(clusters_detected$vcount,
apply(clusters_detected$memberships, 1, FUN = max))
)
gs_df$group_size <- gs_df$individual_num / gs_df$group_num
group_size_df <- rbind(group_size_df, gs_df)
}
return(group_size_df)
}
multilevel_group_size(social_networks)
df <- multilevel_group_size(social_networks)
View(df)
multilevel_group_size <- function(social_networks) {
require(igraph)
time_points <- dimnames(social_networks)[[3]]
group_size_df <- data.frame()
for (i in 1:length(time_points)){
single_network <- social_networks[,,i]
single_network[is.na(single_network)] <- 0
single_graph <- graph.adjacency(single_network, mode = "undirected", weighted = TRUE)
clusters_detected <- cluster_louvain(single_graph)
levels_detected <- nrow(clusters_detected$memberships)
gs_df <- data.frame(
time = time_points[i],
level = 1:(levels_detected + 1),
individual_num = clusters_detected$vcount,
group_num = c(clusters_detected$vcount,
apply(clusters_detected$memberships, 1, FUN = max))
)
gs_df$group_size <- gs_df$individual_num / gs_df$group_num
group_size_df <- rbind(group_size_df, gs_df)
}
return(group_size_df)
}
df <- multilevel_group_size(social_networks)
View(df)
devtools::document()
install.packages("styler")
styler::style_pkg()
usethis::use_testthat()
install.packages("testthat")
# 快速创建测试文件
> usethis::use_test()
usethis::use_test()
install.packages("testthat")
usethis::use_test()
load("E:/#Study/Dunbar number-like pattern in zebra finch/QR_Seewiesen_Dropbox/data/Round1_mixsex/Data_2017-12-12.RData")
View(data)
str(data)
unique(data$camera2)
data1 <- data
data1$id_prob <- NULL
data1$orientation <- NULL
data1[, c("x", "y", "room", "camera")]
data1[, c("x", "y", "room", "camera")] <- NULL
unique(data1$room2)
data1$Replicate <- ifelse(data1$room2 == 7, 1, 2)
data1$room2 <- NULL
colnames(data1)[colnames(data1) == "camera2"] <- "space"
colnames(data1)[colnames(data1) == "trans.x"] <- "x"
colnames(data1)[colnames(data1) == "trans.y"] <- "y"
save(data1, "raw_data_example.rda")
?save
save(data1, file ="raw_data_example.rda")
raw_data_example <- data1
save(raw_data_example, file ="raw_data_example.rda")
usethis::use_r("clumping_rate")
data <- data1
rm(data1)
rm(raw_data_example)
data(zf_ind)
raw_data_example <- data
raw_data_example[which(raw_data_example$id %in% inds$QR),]
raw_data_example[which(raw_data_example$id %in% zf_ind$QR),]
raw_data_example <- raw_data_example[which(raw_data_example$id %in% zf_ind$QR),]
save(raw_data_example, file ="raw_data_example.rda")
data <- data("raw_data_example")
data <- raw_data_example
rm(raw_data_example)
raw_data_rep1 <- data[data$Replicate == 1,]
raw_data_rep1$Replicate <- NULL
usethis::use_data(raw_data_rep1)
data <- raw_data_rep1
View(zf_ind)
View(data)
View(zf_ind)
View(data)
devtools::document()
